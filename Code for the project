from math import gcd

def get_successors(capacities, state):
    successors = []
    a, b = state

    # Pour from jug 1 to jug 2
    if a != 0 and b != capacities[1]:
        pour_amount = min(a, capacities[1] - b)
        successors.append((a - pour_amount, b + pour_amount))

    # Pour from jug 2 to jug 1
    if b != 0 and a != capacities[0]:
        pour_amount = min(b, capacities[0] - a)
        successors.append((a + pour_amount, b - pour_amount))

    # Empty jug 1
    if a != 0:
        successors.append((0, b))

    # Empty jug 2
    if b != 0:
        successors.append((a, 0))

    # Fill jug 1
    if a != capacities[0]:
        successors.append((capacities[0], b))

    # Fill jug 2
    if b != capacities[1]:
        successors.append((a, capacities[1]))

    return successors

def get_manhattan_distance(state, target_quantity):
    a, b = state
    target_row = target_quantity // b if b != 0 else 0
    target_col = target_quantity % b if b != 0 else 0
    return abs(target_row - a) + abs(target_col - (0 if b == 0 else a + b))


def a_star(capacities, target_quantity):
    start_state = (0, 0)
    frontier = [(0, start_state)]
    explored = set()
    g_scores = {start_state: 0}
    f_scores = {start_state: get_manhattan_distance(start_state, target_quantity)}

    while frontier:
        _, current_state = min(frontier)
        if current_state[0] == target_quantity:
            return g_scores[current_state]

        frontier.remove((f_scores[current_state], current_state))
        explored.add(current_state)

        for next_state in get_successors(capacities, current_state):
            if next_state in explored:
                continue

            tentative_g_score = g_scores[current_state] + 1
            if next_state not in [s for _, s in frontier]:
                frontier.append((tentative_g_score + get_manhattan_distance(next_state, target_quantity), next_state))
            elif tentative_g_score >= g_scores[next_state]:
                continue

            g_scores[next_state] = tentative_g_score
            f_scores[next_state] = tentative_g_score + get_manhattan_distance(next_state, target_quantity)

    return -1

# Example cases
with open('input.txt', 'r') as f:
    capacities = list(map(int, f.readline().strip().split(',')))
    target_quantity = int(f.readline().strip())
print(a_star(capacities, target_quantity))



import unittest



class TestJugs(unittest.TestCase):

    def test_a_star(self):
        # Test Case 1
        capacities1 = [5, 3]
        target_quantity1 = 4
        self.assertEqual(a_star(capacities1, target_quantity1), 8)
        # Test Case 2
        capacities1 = [8,5,3,2]
        target_quantity1 = 6
        self.assertEqual(a_star(capacities1, target_quantity1), 6)
        # Test Case 3
        capacities1 = [2, 0]
        target_quantity1 = 143
        self.assertEqual(a_star(capacities1, target_quantity1), -1)





if __name__ == '__main__':
    unittest.main()
